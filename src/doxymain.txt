/*! \mainpage The Object Oriented BIC Programming Library

\author Jason Lerch
\version 0.3
\date April 2003

OOBICPL consists of two main parts: dealing with vertstats (auxilliary
information located at each vertex) files and a set of C++ wrapper
classes for MINC volume manipulation. 

The volume code is currently in hybernation, and while it works just
fine, is still short many features.

\section verstats Vertstats classes overview

\link vertstats vertstats \endlink is the name of auxilliary
information related to a polygonal model, usually a model of the
cerebral cortex. The polygonal data contains information about the
geometry, the vertstats file contains extra information such as
cortical thickness, curvature, or the result of statistical tests.

The most important class here is \link mniVertstatsFile
mniVertstatsFile \endlink. This class allows one to read both the
newer vertstats files as well as their simpler older relative. An
example of loading a file looks like this:

\code
#include <mniVertstatsFile.h>
#include <iostream>

// open the file
mniVertstatsFile f(argv[argc - 1]);
// create a vector of strings to hold the dataheader information
vector<string> header = f.getDataHeader();

// print the dataheader
for (i=0; i < f.getNumColumns(); i++) {
  cout << "    " << header[i] << endl;
}

// print the header
cout << "Header structure: " << endl;
f.printHeaderStructure();

// get a single column of data
vector<float> test1 = f.getDataColumn(0);
\endcode

Along with the basic vertstats manipulation inherent in \link
mniVertstatsFile mniVertstatsFile \endlink there are some templated
math functions available in \link mniVertstatsMath.h mniVertstatsMath
\endlink . So, for example, to open an existing vertstats file, add a
new column that corresponds to the addition of the first two columns,
one would use the following piece of code

\code
#include <mniVertstatsFile.h>
#include <mniVertstatsMath.h>

//open the file 
mniVertstatsFile f(argv[argc - 1]);
vector<float> addition = vectorAdd(f.getDataColumn(0), f.getDataColumn(1));
f.putDataColumn(addition, "Addition");
f.writeFile("output.vertstats")
\endcode

A final word of caution: the bits of code related to vertstats files
are very much a work in progress, and almost certain to still contain
multiple bugs and missing features. You have been warned.

\section volumes Volume classes overview

The OOBICPL contains three classes for working with volumes. The first
is an abstract base class, mniBaseVolume. One can never work directly
with this class, only derive other classes from it. It contains all
functionality for dealing with associated data, such as volume sizes,
dimensions, etc., but not for handling the voxels themselves.

Two classes inherit from mniBaseVolume: the first is mniVolume, which
wraps the volume handling code to be found in volume_io. This class
should be used for just about every situation except for dealing with
label volumes. For that purpose the other derived class,
mniLabelVolume, ought to be used, as it wraps the label volume
functionality which can be found in the bicpl.

\section todo Further work

As it stands right now, this is clearly just a beginning. The next
goal will be to write a template class for dealing with volumes in
their native data-type. Such a class would either use volume_io to
extract all of the imaging information and place it into an array, or
it would work with the minc format directly. The second option is
clearly preferable, but also involves more work!

Furthermore, code to handle tag file and obj files ought to also be
included in this type of a library. And lastly, the featureset has to
be fleshed out more, as many things are still missing.

*/
